require("BgUI")
require("Grid")
require("InitClass")
Manager={}
local MoveSinglePositionTime=0.1
local bgUI=nil
local bgUIPrefab=nil
local gridPrefab=nil
local Spritearrey=nil
local PosXStart=170
local PosYStart=50
local mIsMarkedGrids =nil
----待移动的标记的棋子
local mMoveMarkGrids  = {}
--待移动的非标记的棋子
local mMoveNoMarkGrids  = {}
--待移动的两个交换的棋子
local mMoveSwitchGrids  = {}
local mMarkGridsList = {}
local GridArrey={}
local markGridCount=0
local GridSize=62
local RowCount=9
local mStartMoveTime =0
local SwitchTime=0.5
function Manager:CreatGrid() 
        for  i=0,11,1 do
            for j=0,8,1 do
                local go=Grid:new()
                local spritenum=math.random(1,6)
                local sprite=Spritearrey:GetSprite(spritenum)
                go:Init(gridPrefab,sprite,bgUI.content,spritenum)
                go.gridObject.transform.position=Vector3(PosXStart+i*GridSize,PosYStart+j*GridSize,0)
                if(GridArrey[i]==nil)then
                    GridArrey[i]={}
                end
                GridArrey[i][j]=go
            end
        end
end
function Manager:CreatBgUI()
    bgUI=BgUI:new()
    bgUI:Show(bgUIPrefab)
end
function Manager:Init()
    bgUIPrefab=ABMgr:loadres("ui","BgUI",typeof(GameObject))
    gridPrefab=ABMgr:loadres("ui","Grid",typeof(GameObject));
    Spritearrey= ABMgr:loadres("ui","Sprite",typeof(SpriteAtlas))
    self:CreatBgUI()
    self:CreatGrid()
end
function Manager:CheckAndRefresh()
   self:CheckAll()
   self:Refresh()
end
function Manager:CheckAll()
    self:InitMarkGrids()
    --横向扫描
    for i=0,11,1 do
      for j=0,8,1 do
       if((GridArrey[i][j].num==GridArrey[i+1][j].num) and (GridArrey[i][j].num==GridArrey[i+2][j].num)) then
        self:MarkGrid(i, j);
        self:MarkGrid(i + 1, j);
        self:MarkGrid(i + 2, j);
       end
      end
    end
    --纵向扫描
    for i=0,11,1 do
        for j=0,8,1 do
         if((GridArrey[i][j].num==GridArrey[i][j+1].num) and (GridArrey[i][j].num==GridArrey[i][j+2].num)) then
          self:MarkGrid(i, j);
          self:MarkGrid(i , j+1);
          self:MarkGrid(i , j+2);
         end
        end
      end
end
function  Manager:MarkGrid(x,y)
    markGridCount=#mMarkGridsList[x] + 1;
    for index=0,markGridCount do
        if(mMarkGridsList[x][index]==GridArrey[x][y])then
            return
        end
    end
    if(mMarkGridsList[x][markGridCount]==nil)then
        mMarkGridsList[x][markGridCount]=GridArrey[x][y]
        mIsMarkedGrids=true
    end
end
function Manager:InitMarkGrids()
    mIsMarkedGrids = false;
    for i = 0, 11 do
        mMarkGridsList[i]={}
    end
     mMoveMarkGrids  = {};
     mMoveNoMarkGrids  = {};
end
function  Manager:Refresh()
    for col=0,12 do
       local curColMarkGridCount=#mMarkGridsList[col]
       if(curColMarkGridCount>0)then
           for row=0,8 do
              local notMarkDescend=0
              for k = 1, curColMarkGridCount do
                   if(GridArrey[col][row]==mMarkGridsList[col][k])then
                    notMarkDescend=0
                    break
                   end
                   if(GridArrey[col][row].transform.position.y>mMarkGridsList[col][k].transform.position.y)then
                    notMarkDescend=notMarkDescend+1
                   end
              end
              if(notMarkDescend>0)then
                GridArrey[col][row - notMarkDescend] =GridArrey[col][row]
                local startPos = GridArrey[col][row - notMarkDescend].transform.position;
                local endPos =  Vector3(PosXStart+col*GridSize, PosYStart+(row - notMarkDescend)*GridSize, 0)
                local time = notMarkDescend * MoveSinglePositionTime + 0.3
                 mMoveNoMarkGrids[#mMoveNoMarkGrids+1]={GridArrey[col][row - notMarkDescend],startPos,endPos,time}
              end
           end
           for i = 1, curColMarkGridCount do
                local markIndex = 0;
                  for j = 1, curColMarkGridCount do
                --按照移动前的高低放置
                     if(mMarkGridsList[col][i].transform.position.y < mMarkGridsList[col][j].transform.position.y) then
                         markIndex = markIndex + 1;
                    end
               end
                 GridArrey[col][8 - markIndex] =mMarkGridsList[col][i];
            end
            for row = (9 - curColMarkGridCount), 8 do

                local moveDistance = row + RowCount;
                if( row + moveDistance > 12) then
                    moveDistance = 12 - row;
                end
                --重置棋子，更换棋子游戏物体名称、位置、材质
                GridArrey[col][row].transform.position = Vector3(PosXStart+col*GridSize, PosYStart+(row+moveDistance)*GridSize,0)
                local random = math.random(1, 6);
                local sprite=Spritearrey:GetSprite(random)
                GridArrey[col][row]:SetSprite(sprite,random)
                local startPos = GridArrey[col][row].transform.position;
                local endPos = Vector3(PosXStart+col*GridSize, PosYStart+row*GridSize,0);
                mMoveMarkGrids[#mMoveMarkGrids + 1] ={GridArrey[col][row], startPos, endPos, SwitchTime};
            end
       end
    end
    if ((#mMoveMarkGrids > 0) or (#mMoveNoMarkGrids > 0)) then
        mStartMoveTime =Time.time
    end
end
function Manager:Update()
    if(Time.framecount==60)then
        self:CheckAndRefresh()
    end
    if(#mMoveNoMarkGrids>0)then
        if(self:Move(mMoveNoMarkGrids))then
            mMoveNoMarkGrids={}
            mStartMoveTime=Time.time
        end
    end
    if(#mMoveMarkGrids>0)then
        if(self:Move(mMoveMarkGrids))then
            mMoveNoMarkGrids={}
            self:CheckAndRefresh()
            mStartMoveTime=Time.time
        end
    end

end
function Manager:Move(Grids)
    local Gridcount=#Grids
    if(Gridcount<=0)then
        return false
    end
    local finishcount=0
    for i=1,Gridcount do
       local goTarget = Grids[i][1]
        local startPos = Grids[i][2]
        local endPos = Grids[i][3]
        local time = Grids[i][4]
        local position = Vector3.Lerp(startPos, endPos, (Time.time- mStartMoveTime) / time);
        goTarget.transform.position=position
        if(Vector3.Distance(endPos, position) == 0) then
            finishcount = finishcount + 1;
        end

    end
    return finishcount==Gridcount
end
